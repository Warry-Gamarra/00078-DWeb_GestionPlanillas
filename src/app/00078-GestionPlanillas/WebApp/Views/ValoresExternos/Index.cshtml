@Styles.Render("~/content/fileinput")
@Scripts.Render("~/bundles/fileinput")

<div class="container-fluid">
    <div class="col-12 mb-4">
        <section class="content-header">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb float-right small d-none d-sm-inline-flex">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")"><i class="fa fa-home" aria-hidden="true">&nbsp;</i>Inicio</a></li>
                    <li class="breadcrumb-item"><span><i class="fa fa-refresh" aria-hidden="true">&nbsp;</i>Operaciones </span></li>
                    <li class="breadcrumb-item active"><span><i class="fa fa-cloud-upload" aria-hidden="true">&nbsp;</i>@ViewBag.Title </span></li>
                </ol>
            </nav>
            <h1 class="">@ViewBag.Title <small></small></h1>
        </section>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <span class="h4">Archivo externo</span>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("ObtenerInformacionArchivo", "ValoresExternos", FormMethod.Post,
                new { id = "form-upload", enctype = "multipart/form-data", @class = "form-inline" }))
            {
                <form id="form-upload" name="form-upload" class="form-inline" enctype="multipart/form-data">
                    <div class="form-group mr-2">
                        <label class="control-label" for="inputFile">Seleccione archivo</label>
                        <input type="file" class="form-control-file" id="inputFile" name="inputFile" />
                    </div>
                    <div class="form-group mr-2">
                        @Html.AntiForgeryToken()
                        <button type="submit" id="btnLeerArchivo" class="btn btn-primary"><i class="fa fa-search" aria-hidden="true"></i> Leer archivo</button>
                        <div id="wating-section" class="d-none">
                            <strong>Cargando información...</strong>
                            <div class="spinner-border ml-auto text-primary" role="status" aria-hidden="true"></div>
                        </div>
                    </div>
                </form>
            }
            <div class="form-group" id="error-matricula"></div>
        </div>
        <div class="card-body">
            <ul>
                <li><a href="@Url.Action("DescargarFormatoCargaInformacionExterna", "General")">Descargar Formato para registrar información externa [.xlsx]</a></li>
                <li><a href="@Url.Action("DescargarCatalogoFormatoCargaInformacionExterna", "General")">Descargar Catálogo de Datos para registrar información externa [.xlsx]</a></li>
            </ul>
        </div>
    </div>

    

    <div class="card mb-4">
        <div class="card-header">
            @using (Html.BeginForm("DescargarResultadoLectura", "ValoresExternos", FormMethod.Post, new { id = "form-register", target = "_blank" }))
            {
                @Html.AntiForgeryToken()
                <span class="h4">Vista previa</span>
                <input type="hidden" id="fileName" name="fileName" />
                <button type="submit" class="btn btn-primary pull-right d-none" id="btnDescargarResultadoLectura">
                    <i class="fa fa-download" aria-hidden="true"></i> Descargar [.xlsx]
                </button>
                <label class="pull-right">&nbsp;</label>
                <button type="button" class="btn btn-primary pull-right d-none" id="btnGrabarArchivo">
                    <i class="fa fa-save" aria-hidden="true"></i> Guardar información
                </button>
            }
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover" id="dataTableValoresExternos" width="100%">
                    <thead class="thead-dark">
                        <tr>
                            <th></th>
                            <th>Año</th>
                            <th>Mes</th>
                            <th>Tip.Doc.</th>
                            <th>Num.Doc.</th>
                            <th>Apellidos y Nombres</th>
                            <th>Planilla</th>
                            <th>Cod.Concepto</th>
                            <th>Descripción</th>
                            <th>Valor</th>
                            <th>Origen</th>
                            <th>Obs</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th></th>
                            <th>Año</th>
                            <th>Mes</th>
                            <th>Tip.Doc.</th>
                            <th>Num.Doc.</th>
                            <th>Apellidos y Nombres</th>
                            <th>Planilla</th>
                            <th>Cod.Concepto</th>
                            <th>Descripción</th>
                            <th>Valor</th>
                            <th>Origen</th>
                            <th>Obs</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>

    <div class="card d-none" id="summary">
        <div class="card-header">
            <dl>
                <dt class="h4">Monto total: <span class="badge badge-primary" id="totalArchivo"></span></dt>
                <dt class="h4">Monto total (sólo correctos): <span class="badge badge-primary" id="totalCorrecto"></span></dt>
            </dl>
        </div>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            limpiarData();

            $("#inputFile").fileinput({
                showCaption: true,
                dropZoneEnabled: false,
                language: 'es',
                allowedFileExtensions: ["xls", "xlsx"],
                showPreview: false,
                showUpload: false,
                elErrorContainer: '#error-matricula'
            });

            $('#inputFile').on('change filecleared', function (event) {
                limpiarData();
            });

            $('#form-upload').on('submit', function (event) {
                event.preventDefault();
                var form = $(this);

                form.ajaxSubmit({
                    cache: false,
                    url: form.attr("action"),
                    type: "POST",
                    processData: false,
                    dataType: "json",
                    beforeSend: function () {
                        limpiarData();
                        $("#btnLeerArchivo").addClass("d-none");
                        $("#wating-section").removeClass("d-none");
                    },
                    success: function (result) {
                        if (result.success) {
                            let fileName = result.data.Item1;
                            let jsonData = result.data.Item2;

                            $("#fileName").val(fileName);
                            generarDatatableValoresExternos(jsonData);
                        } else {
                            toastr.error(result.message);
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        toastr.error(errorThrown);
                    },
                    complete: function () {
                        $("#btnLeerArchivo").removeClass("d-none");
                        $("#wating-section").addClass("d-none");
                    }
                });
            });

            $('#form-register #btnGrabarArchivo').on('click', function () {
                $.ajax({
                    url: '@Url.Action("GuardarInformacion", "ValoresExternos")',
                    type: "POST",
                    data: {
                        __RequestVerificationToken: $('#form-register input[name="__RequestVerificationToken"]').val(),
                        fileName: $('#form-register #fileName').val()
                    },
                    beforeSend: function () {
                    },
                    success: function (result) {
                        if (result.success) {
                            toastr.success(result.message);
                            limpiarData();
                            $("#inputFile").fileinput("clear");
                        } else {
                            toastr.error(result.message);
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        toastr.error(errorThrown);
                    }
                });
            });

            $('#dataTableValoresExternos').DataTable().on('order.dt search.dt', function () {
                $('#dataTableValoresExternos').DataTable().column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
                    cell.innerHTML = i + 1;
                });
            });
        });

        function generarDatatableValoresExternos(jsonObject) {
            $('#dataTableValoresExternos').DataTable({
                data: jsonObject,
                columns: [
                    { data: 'numDocumento' },
                    { data: 'anio' },
                    { data: 'mes' },
                    { data: 'tipoDocumentoID' },
                    { data: 'numDocumento' },
                    { data: 'datosPersona', width: '15%' },
                    { data: 'categoriaPlanillaDesc' },
                    { data: 'conceptoCod' },
                    { data: 'conceptoDesc' },
                    { data: 'valorConcepto' },
                    { data: 'proveedorID' },
                    { data: 'esRegistroCorrecto', width: '15%' }
                ],
                columnDefs: [
                    {
                        targets: 2,
                        render: function (data, type, row) {
                            return row.mesDesc + ' (' + row.mes + ')';
                        }
                    },
                    {
                        targets: 3,
                        render: function (data, type, row) {
                            return row.tipoDocumentoDesc + ' (' + row.tipoDocumentoID + ')';
                        }
                    },
                    {
                        targets: 6,
                        render: function (data, type, row) {
                            return row.categoriaPlanillaDesc + ' (' + row.categoriaPlanillaID + ')';
                        }
                    },
                    {
                        targets: 9,
                        render: function (data, type, row) {
                            return data + ` ( ${row.simboloValorConcepto} )`;
                        }
                    },
                    {
                        targets: 10,
                        render: function (data, type, row) {
                            return row.proveedorDesc + ' (' + row.proveedorID + ')';
                        }
                    },
                    {
                        targets: 11,
                        render: function (data, type, row) {
                            let obs = '';

                            row.observaciones.forEach(function (item) {
                                obs += `<li>${item}</li>`;
                            });

                            return obs;
                        }
                    }
                ],
                bStateSave: false,
                bDestroy: true,
                lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "Todas"]],
                iDisplayLength: 10,
                language: {
                    search: "Buscar: ",
                    lengthMenu: "Mostrar _MENU_ filas",
                    info: "Mostrando del _START_ al _END_ de _TOTAL_ elementos.",
                    infoEmpty: "No se encontraron registros.",
                    zeroRecords: "No hay data disponible.",
                    emptyTable: "No hay data disponible.",
                    paginate: {
                        first: "Primero",
                        previous: "Previo",
                        next: "Siguiente",
                        last: "Último"
                    },
                    aria: {
                        sortAscending: ": activar para ordenar la columna en orden ascendente",
                        sortDescending: ": activar para ordenar la columna en orden descendente"
                    },
                    loadingRecords: "Cargando...",
                    processing: "Procesando..."
                },
                searching: true,
                "initComplete": function (settings, json) {
                    var api = this.api();

                    var numRows = api.rows().count();

                    //Mostrar total
                    if (numRows > 0) {
                        let sumTotalCorrecto = 0;
                        let sumTotalArchivo = 0;

                        jsonObject.forEach(function (item) {
                            if (item.esRegistroCorrecto) {
                                sumTotalCorrecto += Number.parseFloat(item.valorConcepto.toPrecision(15));

                                sumTotalCorrecto = Number.parseFloat(sumTotalCorrecto.toFixed(2));
                            }

                            if (item.valorConceptoCorrecto) {
                                sumTotalArchivo += Number.parseFloat(item.valorConcepto.toPrecision(15));

                                sumTotalArchivo = Number.parseFloat(sumTotalArchivo.toFixed(2));
                            }
                        });

                        $('#totalCorrecto').html('S/. ' + sumTotalCorrecto);
                        $('#totalArchivo').html('S/. ' + sumTotalArchivo);

                        $("#summary").removeClass("d-none");
                        $("#btnGrabarArchivo").removeClass("d-none");
                        $("#btnDescargarResultadoLectura").removeClass("d-none");
                    } else {
                        $("#summary").addClass("d-none");
                        $("#btnGrabarArchivo").addClass("d-none");
                        $("#btnDescargarResultadoLectura").addClass("d-none");
                    }

                    //Filtro
                    api.columns([11]).every(function () {
                        let column = this;

                        let select = document.createElement('select');
                        select.add(new Option('Observaciones', ''));
                        column.footer().replaceChildren(select);

                        select.addEventListener('change', function () {
                            var val = $.fn.dataTable.util.escapeRegex(select.value);

                            if (val === "true") {
                                column.search('^.{0}$', true, false).draw();
                            } else if (val === "false") {
                                column.search('.{1,}', true, false).draw();
                            } else {
                                column.search('').draw();
                            }
                        });

                        column.data().unique().sort().each(function (d, j) {
                            let textValue = (d === true) ? "Sólo correctos" : "Sólo observados";

                            if (column.search() === '^' + d + '$') {
                                select.add(new Option(textValue, d, true, true));
                            } else {
                                select.add(new Option(textValue, d));
                            }
                        });

                        $(select).click(function (e) {
                            e.stopPropagation();
                        });
                    });
                }
            });
        }

        function limpiarData() {
            $("#fileName").val("");
            generarDatatableValoresExternos([]);
        }
    </script>
}
