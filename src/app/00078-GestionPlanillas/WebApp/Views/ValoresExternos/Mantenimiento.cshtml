<div class="container-fluid">
    <div class="col-12 mb-4">
        <section class="content-header">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb float-right small d-none d-sm-inline-flex">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")"><i class="fa fa-home">&nbsp;</i>Inicio</a></li>
                    <li class="breadcrumb-item"><span><i class="fa fa-refresh">&nbsp;</i>Operaciones </span></li>
                    <li class="breadcrumb-item active"><span><i class="fa bi-stack">&nbsp;</i>@ViewBag.Title </span></li>
                </ol>
            </nav>
            <h1 class="">@ViewBag.Title <small></small></h1>
        </section>
    </div>

    <div class="col-12 mt-4">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body bg-light-gray">
                        @using (Html.BeginForm("Index", "Planillas", FormMethod.Get, new { id = "frmConsultaInformacionExterna" }))
                        {
                            <div class="form-row">
                                <div class="form-group col-lg-2 col-md-4 col-6">
                                    @Html.Label("anio", "Año", new { @class = "control-label" })
                                    @Html.DropDownList("anio", ViewBag.ListaAños as SelectList, null, new { @class = "form-control" })
                                </div>

                                <div class="form-group col-lg-2 col-md-4 col-6">
                                    @Html.Label("mes", "Mes", new { @class = "control-label" })
                                    @Html.DropDownList("mes", ViewBag.ListaMeses as SelectList, null, new { @class = "form-control text-uppercase" })
                                </div>

                                <div class="form-group col-lg-3 col-md-4 col-6">
                                    <label for="idCategoria">Categoria</label>
                                    @Html.DropDownList("idCategoria", ViewBag.ListaCategoriasPlanillas as SelectList, new { @class = "form-control text-uppercase" })
                                </div>

                                <div class="form-group col-lg-2 col-4">
                                    <label>&nbsp;</label>
                                    <button type="button" class="btn btn-block btn-outline-primary"><i class="fa fa-fw fa-search"></i> Consultar</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="table-responsive mt-4" style="min-height:300px">
            <table class="table table-hover" id="dataTableValoresExternos" width="100%">
                <thead class="thead-dark">
                    <tr>
                        <th>Año</th>
                        <th>Mes</th>
                        <th>Tip.Doc.</th>
                        <th>Num.Doc.</th>
                        <th>Apellidos y Nombres</th>
                        <th>Planilla</th>
                        <th>Cod.Concepto</th>
                        <th>Descripción</th>
                        <th>Valor</th>
                        <th>Origen</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <th>Año</th>
                        <th>Mes</th>
                        <th>Tip.Doc.</th>
                        <th>Num.Doc.</th>
                        <th>Apellidos y Nombres</th>
                        <th>Planilla</th>
                        <th>Cod.Concepto</th>
                        <th>Descripción</th>
                        <th>Valor</th>
                        <th>Origen</th>
                        <th></th>
                        <th></th>
                    </tr>
                </tfoot>
            </table>
        </div>

    </div>
</div>

@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {
             generarDatatableInformacionExterna(null, null, null);

             $("#frmConsultaInformacionExterna").on("change", "#anio", function () {
                let cmbDestino = $('#frmConsultaInformacionExterna #mes');

                let url = '@Url.Action("ObtenerMesesPorAnio", "General")';

                CargarMeses(this, cmbDestino, url);
             });

            $("#frmConsultaInformacionExterna").on("click", "button", function () {
                let anio = $("#frmConsultaInformacionExterna #anio").val();
                let mes = $("#frmConsultaInformacionExterna #mes").val();
                let idCategoria = $("#frmConsultaInformacionExterna #idCategoria").val();

                generarDatatableInformacionExterna(anio, mes, idCategoria);
            });

            $(".modal").on('hide.bs.modal', function () {
                let anio = $("#frmConsultaInformacionExterna #anio").val();
                let mes = $("#frmConsultaInformacionExterna #mes").val();
                let idCategoria = $("#frmConsultaInformacionExterna #idCategoria").val();

                generarDatatableInformacionExterna(anio, mes, idCategoria);
            });

            $('#dataTableValoresExternos').on('click', '.btn-eliminar', function (event) {
                event.preventDefault();

                let id = $(this).data("id");
                let token = $('input[name="__RequestVerificationToken"]').val();

                Swal.fire({
                    title: '',
                    text: '¿Desea eliminar este registro?',
                    icon: MENSAJE.WARNING,
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Si, continuar.',
                    cancelButtonText: 'No, cancelar.'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '@Url.Action("Eliminar", "ValoresExternos")/' + id,
                            type: "POST",
                            data: { __RequestVerificationToken: token },
                            beforeSend: function () {
                            },
                            success: function (data) {
                                if (data.Success) {
                                    mostrarMensajeSistema(data.Message, MENSAJE.SUCCESS);

                                    let anio = $("#frmConsultaInformacionExterna #anio").val();
                                    let mes = $("#frmConsultaInformacionExterna #mes").val();
                                    let idCategoria = $("#frmConsultaInformacionExterna #idCategoria").val();

                                    generarDatatableInformacionExterna(anio, mes, idCategoria);
                                } else {
                                    mostrarMensajeSistema(data.Message, MENSAJE.ERROR);
                                }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                $('#content-body').html('<p class="alert alert-danger">' + jqXHR.responseText + '</p>');
                            }
                        });
                    }
                });
            });
        });

        function generarDatatableInformacionExterna(anio, mes, idCategoria) {
            let parametros = {
                anio: anio,
                mes: mes,
                idCategoria: idCategoria
            };

            $('#dataTableValoresExternos').DataTable({
                ajax: {
                    'url': '@Url.Action("ObtenerListaInformaciónExterna", "ValoresExternos")',
                    'data': parametros,
                    'type': 'get'
                },
                columns: [
                    { data: 'anio' },
                    { data: 'mesDesc' },
                    { data: 'tipoDocumentoDesc' },
                    { data: 'numDocumento' },
                    { data: 'datosPersona' },
                    { data: 'categoriaPlanillaDesc' },
                    { data: 'conceptoCod' },
                    { data: 'conceptoDesc' },
                    { data: 'valorConcepto' },
                    { data: 'proveedorDesc' },
                    { data: 'conceptoExternoValorID' },
                    { data: 'conceptoExternoValorID' }
                ],
                columnDefs: [
                    {
                        targets: -2,
                        orderable: false,
                        render: function (data, type, row) {
                            if (!row.tienePlanilla) {
                                return `<a class="modal-link" href="@Url.Action("Editar", "ValoresExternos")/${data}` +
                                '" title="Editar"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></a>';
                            } else {
                                return "";
                            }
                        }
                    },
                    {
                        targets: -1,
                        orderable: false,
                        render: function (data, type, row) {
                            if (!row.tienePlanilla) {
                                return `<a class="btn-eliminar" href="#" data-id="${data}"` +
                                    '" title="Eliminar"><i class="fa fa-trash" aria-hidden="true"></i></a>';
                            } else {
                                return "";
                            }
                        }
                    }
                ],
                bStateSave: true,
                bDestroy: true,
                lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "Todas"]],
                iDisplayLength: 5,
                language: {
                    search: "Buscar: ",
                    lengthMenu: "Mostrar _MENU_ filas",
                    info: "Mostrando del _START_ al _END_ de _TOTAL_ elementos.",
                    infoEmpty: "No se encontraron registros.",
                    zeroRecords: "No hay data disponible.",
                    emptyTable: "No hay data disponible.",
                    paginate: {
                        first: "Primero",
                        previous: "Previo",
                        next: "Siguiente",
                        last: "Último"
                    },
                    aria: {
                        sortAscending: ": activar para ordenar la columna en orden ascendente",
                        sortDescending: ": activar para ordenar la columna en orden descendente"
                    },
                    loadingRecords: "Cargando...",
                    processing: "Procesando..."
                },
                searching: true
            });
        }
    </script>
}
