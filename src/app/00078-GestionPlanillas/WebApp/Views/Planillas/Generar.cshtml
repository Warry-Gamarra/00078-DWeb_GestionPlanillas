@model IEnumerable<WebApp.Models.TrabajadorCategoriaPlanillaModel>
@using GridMvc.Html

<div class="container-fluid">
    <div class="col-12 mb-4">
        <section class="content-header">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb float-right small d-none d-sm-inline-flex">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")"><i class="fa fa-home">&nbsp;</i>Inicio</a></li>
                    <li class="breadcrumb-item"><span><i class="fa bi-tools">&nbsp;</i>Mantenimiento </span></li>
                    <li class="breadcrumb-item active"><span><i class="fa bi-ui-checks-grid">&nbsp;</i>@ViewBag.Title </span></li>
                </ol>
            </nav>
            <h1 class="">@ViewBag.Title <small></small></h1>
        </section>
    </div>

    <div class="col-12 mt-4">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body bg-light-gray">
                        @using (Html.BeginForm("Generar", "Planillas", FormMethod.Get, new { id = "frmBusquedaTrabajador" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="form-row">
                                <div class="form-group col-lg-2 col-md-4 col-6">
                                    @Html.Label("anio", "Año", new { @class = "control-label" })
                                    @Html.DropDownList("anio", ViewBag.ListaAños as SelectList, null, new { @class = "form-control" })
                                </div>

                                <div class="form-group col-lg-2 col-md-4 col-6">
                                    @Html.Label("mes", "Mes", new { @class = "control-label" })
                                    @Html.DropDownList("mes", ViewBag.ListaMeses as SelectList, null, new { @class = "form-control text-uppercase" })
                                </div>

                                <div class="form-group col-lg-3 col-md-4 col-6">
                                    <label for="idCategoria">Categoria</label>
                                    @Html.DropDownList("idCategoria", ViewBag.ListaCategoriasPlanillas as SelectList, new { @class = "form-control text-uppercase" })
                                </div>

                                <div class="form-group col-lg-2 col-4">
                                    <label>&nbsp;</label>
                                    @Html.Hidden("busqueda", true)
                                    <button type="submit" class="btn btn-block btn-outline-primary"><i class="fa fa-fw fa-search"></i> Verificar</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <div class="table-responsive mt-4">
                    <p class="h5">Relación de estudiantes registrados en el sistema</p>
                    @if (Model != null && Model.Count() > 0)
                    {
                        <div class="form-group col-lg-2 col-4 pl-0">
                            <button type="button" id="btnGenerar" class="btn btn-block btn-outline-primary"><i class="fa fa-fw fa-cogs"></i> Generar Planilla</button>
                        </div>
                    }

                   @Html.Grid(Model).Columns(columns =>
                   {
                       columns.Add().Titled("-").Encoded(false).Sanitized(false)
                        .RenderValueAs(model => "<input type=\"checkbox\" name=\"chkTrabajador\" value=\"" + model.I_TrabajadorID + "\"" + (model.B_Checked ? "checked" : "") + " onclick=\"deshabilitarTrabajador(this);\" /> ");
                       columns.Add(c => c.T_CategoriaPlanillaDesc).Titled("Planilla").Css("text-left");
                       columns.Add(c => c.T_VinculoDesc).Titled("Vínculo").Css("text-left").Filterable(true);
                       columns.Add(c => c.C_TrabajadorCod).Titled("Cod.Per.").Css("text-left").Filterable(true);
                       columns.Add(c => c.T_TipoDocumentoDesc).Titled("Tip.Doc.").Css("text-left").Filterable(true);
                       columns.Add(c => c.C_NumDocumento).Titled("Num.Doc.").Css("text-center").Filterable(true);
                       columns.Add(c => c.T_ApellidosNombre).Titled("Apellidos y Nombres").Css("text-left").Filterable(true);
                       columns.Add(c => c.T_EstadoDesc).Titled("Estado").Css("text-left").Filterable(true);    
                   }).WithPaging(15).Sortable(true).WithGridItemsCount("Registros encontrados").EmptyText("No se encontraron registros")
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $("#frmBusquedaTrabajador").on("change", "#anio", function () {
        let cmbDestino = $('#frmBusquedaTrabajador #mes');

        let url = '@Url.Action("ObtenerMesesPorAnio", "General")';

        CargarMeses(this, cmbDestino, url);
    });

    function deshabilitarTrabajador(element) {
        let parametros = {
            id: element.value,
            isChecked: $(element).is(':checked')
        };

        $.ajax({
            type: 'GET',
            url: '@Url.Action("DeshabilitarTrabajador", "Planillas")',
            data: parametros,
            dataType: 'json',
            beforeSend: function () {
            },
            success: function (response) {
                if (!response.Success) {
                    mostrarMensajeSistema(response.Message, MENSAJE.ERROR);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                mostrarMensajeSistema(thrownError, MENSAJE.ERROR);
            }
        });
    }

    $(document).on("click", "#btnGenerar", function () {
        let parametros = {
            I_Anio: $('#frmBusquedaTrabajador #anio').val(),
            I_Mes: $('#frmBusquedaTrabajador #mes').val(),
            I_CategoriaPlanillaID: $('#frmBusquedaTrabajador #idCategoria').val(),
            __RequestVerificationToken: $('#frmBusquedaTrabajador input[name="__RequestVerificationToken"]').val()
        };

        $.ajax({
            type: 'POST',
            url: '@Url.Action("Generar", "Planillas")',
            data: parametros,
            dataType: 'json',
            beforeSend: function () {
            },
            success: function (response) {
                if (response.Success) {
                    mostrarMensajeSistema(response.Message, MENSAJE.SUCCESS);
                } else {
                    mostrarMensajeSistema(response.Message, MENSAJE.ERROR);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                mostrarMensajeSistema(thrownError, MENSAJE.ERROR);
            }
        });
    });
</script>
