<div class="container-fluid">
    <div class="col-12 mb-4">
        <section class="content-header">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb float-right small d-none d-sm-inline-flex">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")"><i class="fa fa-home">&nbsp;</i>Inicio</a></li>
                    <li class="breadcrumb-item"><span><i class="fa fa-refresh">&nbsp;</i>Operaciones </span></li>
                    <li class="breadcrumb-item active"><span><i class="fa fa-table">&nbsp;</i>@ViewBag.Title </span></li>
                </ol>
            </nav>
            <h1 class="">@ViewBag.Title <small></small></h1>
        </section>
    </div>

    <div class="col-12 mt-4">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body bg-light-gray">
                        @using (Html.BeginForm("Generar", "TrabajadorCategoriaPlanilla", FormMethod.Get, new { id = "frmBusquedaTrabajadores" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="form-row">
                                <div class="form-group col-lg-3 col-md-4 col-6">
                                    <label for="idCategoria">Categoria</label>
                                    @Html.DropDownList("idCategoria", ViewBag.ListaCategoriasPlanillas as SelectList, new { @class = "form-control text-uppercase" })
                                </div>

                                <div class="form-group col-lg-2 col-4">
                                    <label>&nbsp;</label>
                                    @Html.Hidden("busqueda", true)
                                    <button type="button" class="btn btn-block btn-outline-primary"><i class="fa fa-fw fa-search"></i> Consultar</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <div class="table-responsive mt-4">
                    <p id="pAgregarTrabajador" class="h5 mt-2 mb-2" style="display:none;">
                        Relación de trabajadores asignados a la planilla <b id="nomPlanilla"></b>
                    </p>

                    <div id="divAgregarTrabajador" class="form-group pull-right pr-0" style="display: none;">
                        <a href="@Url.Action("BuscarTrabajador", "TrabajadorCategoriaPlanilla")" class="btn btn-primary modal-link">
                            <i class="fa fa-plus-circle"></i> Agregar trabajador
                        </a>
                    </div>

                    <table class="table table-hover" id="dataTableTrabajadoresAsignados" width="100%">
                        <thead class="thead-dark">
                            <tr>
                                <th>Planilla</th>
                                <th>Descripción</th>
                                <th>Dependencia</th>
                                <th>Cod.Per.</th>
                                <th>Doc.Identidad</th>
                                <th>Apellidos y Nombres</th>
                                <th>Vínculo</th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tfoot>
                            <tr>
                                <th>Planilla</th>
                                <th>Descripción</th>
                                <th>Cod.Per.</th>
                                <th>Doc.Identidad</th>
                                <th>Apellidos y Nombres</th>
                                <th>Vínculo</th>
                                <th>Dependencia</th>
                                <th></th>
                                <th></th>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            generarDatatableTrabajadoresAsignados();

            $("#frmBusquedaTrabajadores").on("click", "button", function () {
                generarDatatableTrabajadoresAsignados();
            });

            $('#dataTableTrabajadoresAsignados').on('click', '.btn-eliminar', function (event) {
                event.preventDefault();

                let id = $(this).data("id");
                let token = $('input[name="__RequestVerificationToken"]').val();

                Swal.fire({
                    title: '',
                    text: '¿Desea eliminar este registro?',
                    icon: MENSAJE.WARNING,
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Si, continuar.',
                    cancelButtonText: 'No, cancelar.'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '@Url.Action("Eliminar", "TrabajadorCategoriaPlanilla")/' + id,
                            type: "POST",
                            data: { __RequestVerificationToken: token },
                            beforeSend: function () {
                            },
                            success: function (data) {
                                if (data.Success) {
                                    mostrarMensajeSistema(data.Message, MENSAJE.SUCCESS);
                                    generarDatatableTrabajadoresAsignados();
                                } else {
                                    mostrarMensajeSistema(data.Message, MENSAJE.ERROR);
                                }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                toastr.error(errorThrown);
                            }
                        });
                    }
                });
            });
        });

        function generarDatatableTrabajadoresAsignados() {
            let comboCategoria = $("#frmBusquedaTrabajadores #idCategoria");
            let idCategoria = comboCategoria.val();
            let descCategoria = comboCategoria.find('option:selected').text();

            let parametros = {
                idCategoria: idCategoria
            };

            $('#dataTableTrabajadoresAsignados').DataTable({
                ajax: {
                    'url': '@Url.Action("ObtenerListaTrabajadoresAsignados", "TrabajadorCategoriaPlanilla")',
                    'data': parametros,
                    'type': 'get'
                },
                columns: [
                    { data: 'categoriaPlanillaDesc' },
                    { data: 'grupoTrabajoDesc' },
                    { data: 'dependenciaDesc' },
                    { data: 'trabajadorCod' },
                    { data: 'tipoDocumentoDesc' },
                    { data: 'apellidosNombre' },
                    { data: 'vinculoDesc' },
                    { data: 'trabajadorCategoriaPlanillaID', width: '10%' },
                    { data: 'trabajadorCategoriaPlanillaID', width: '5%' }
                ],
                columnDefs: [
                    {
                        targets: 4,
                        orderable: false,
                        render: function (data, type, row) {
                            return data + " - " + row.numDocumento;
                        }
                    },
                    {
                        targets: -2,
                        className: "text-center",
                        orderable: false,
                        render: function (data, type, row) {
                            let btnClass = (row.estaHabilitado === true) ? 'success' : 'secondary';
                            let iClass = (row.estaHabilitado === true) ? 'check-circle-o' : 'minus-circle';
                            let estado = (row.estaHabilitado === true) ? '&nbsp;&nbsp;&nbsp;Habilitado&nbsp;&nbsp;&nbsp;' : 'Deshabilitado';
                            let token = $('input[name="__RequestVerificationToken"]').val();
                            let onClickFunction = `ChangeState(${data}, ${row.estaHabilitado}, '@Url.Action("CambiarEstado", "TrabajadorCategoriaPlanilla")', '${token}', 'dataTableTrabajadoresAsignados')`;

                            let html = row.esCategoriaPrincipal ? '<span class="text-success">Habilitado</span>' : (`<span id="td${data}">` +
                                `<button type="submit" class="btn btn-xs btn-${btnClass}" onclick="${onClickFunction}">` +
                                `<i class="fa fa-${iClass}" aria-hidden="true"></i> <span class="d-none d-md-inline-block">${estado}</span>` +
                                '</button>' +
                                '</span>');

                            return html;
                        }
                    },
                    {
                        targets: -1,
                        className: "text-center",
                        orderable: false,
                        render: function (data, type, row) {
                            return row.esCategoriaPrincipal ? '' : `<a class="btn-eliminar" href="#" data-id="${data}"` +
                                '" title="Eliminar"><i class="fa fa-trash" aria-hidden="true"></i></a>';
                        }
                    }
                ],
                bStateSave: false,
                bDestroy: true,
                lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "Todas"]],
                iDisplayLength: 10,
                language: {
                    search: "Buscar: ",
                    lengthMenu: "Mostrar _MENU_ filas",
                    info: "Mostrando del _START_ al _END_ de _TOTAL_ elementos.",
                    infoEmpty: "No se encontraron registros.",
                    zeroRecords: "No hay data disponible.",
                    emptyTable: "No hay data disponible.",
                    paginate: {
                        first: "Primero",
                        previous: "Previo",
                        next: "Siguiente",
                        last: "Último"
                    },
                    aria: {
                        sortAscending: ": activar para ordenar la columna en orden ascendente",
                        sortDescending: ": activar para ordenar la columna en orden descendente"
                    },
                    loadingRecords: "Cargando...",
                    processing: "Procesando..."
                },
                searching: true,
                initComplete: function (settings, json) {
                    var api = this.api();
                    var numRows = api.rows().count();
                    var display = "none";
                    var nomPlanilla = "";

                    if (numRows > 0) {
                        display = "block";
                        nomPlanilla = descCategoria;
                    }

                    $('#pAgregarTrabajador').css('display', display);
                    $('#divAgregarTrabajador').css('display', display);
                    $('#nomPlanilla').html(nomPlanilla);
                }
            });
        }
    </script>
}
