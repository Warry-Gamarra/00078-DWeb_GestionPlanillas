@model WebApp.Models.TrabajadorModel
@Scripts.Render("~/bundles/jqueryval")

<div class="modal-header bg-dark-gray" style="border-radius: .2rem .2rem 0px 0px">
    <h5 class="modal-title text-center"><i class="fa fa-tag">&nbsp;</i> @ViewBag.Title</h5>
    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
</div>

<div class="modal-body">
    @using (Ajax.BeginForm((string)ViewBag.Action, "Trabajadores", new { area = "" }, new AjaxOptions
    {
        HttpMethod = "POST",
        InsertionMode = InsertionMode.Replace,
        UpdateTargetId = "div_msg",
        OnBegin = "Load",
        OnComplete = "Stop"
    }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.trabajadorID)
        @Html.HiddenFor(model => model.personaID)
        @Html.HiddenFor(model => model.cuspp)
        <div class="form-row">
            <div class="col-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.tipoDocumentoID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.tipoDocumentoID, ViewBag.ListaTipoDocumentos as SelectList, null, new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-3">
                <div class="form-group">
                    <label class="control-label" for="numDocumento">&nbsp;</label>
                    @Html.TextBoxFor(model => model.numDocumento, new { @class = "form-control", @placeholder = "Num.Documento" })
                    @Html.ValidationMessageFor(model => model.numDocumento, null, new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.apellidoPaterno, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.apellidoPaterno, new { @class = "form-control", @style = "text-transform:uppercase;" })
                    @Html.ValidationMessageFor(model => model.apellidoPaterno, null, new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.apellidoMaterno, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.apellidoMaterno, new { @class = "form-control", @style = "text-transform:uppercase;" })
                    @Html.ValidationMessageFor(model => model.apellidoMaterno, null, new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.nombre, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.nombre, new { @class = "form-control", @style = "text-transform:uppercase;" })
                    @Html.ValidationMessageFor(model => model.nombre, null, new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.sexoID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.sexoID, ViewBag.ListaSexos as SelectList, null, new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.trabajadorCod, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.trabajadorCod, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.trabajadorCod, null, new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    @if ((bool)ViewBag.PermitirEdicionVinculo)
                    {
                        @Html.LabelFor(model => model.vinculoID, new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.vinculoID, ViewBag.ListaVinculos as SelectList, null, new { @class = "form-control text-uppercase" })
                    }
                    else
                    {
                        @Html.LabelFor(model => model.vinculoID, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.vinculoDesc, new { @class = "form-control text-uppercase", @readonly = "readonly" })
                        @Html.HiddenFor(model => model.vinculoID)
                    }
                </div>
            </div>
            <div class="col-4 administrativo">
                <div class="form-group">
                    @Html.LabelFor(model => model.grupoOcupacionalID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.grupoOcupacionalID, ViewBag.GruposOcupacionales as SelectList, new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-4 administrativo">
                <div class="form-group">
                    @Html.LabelFor(model => model.nivelRemunerativoID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.nivelRemunerativoID, ViewBag.NivelesRemunerativos as SelectList, new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-4 docente">
                <div class="form-group">
                    <label for="categoriaDocenteID" class="control-label"></label>
                    @Html.DropDownListFor(model => model.categoriaDocenteID, ViewBag.CategoriasDocenteOrdinario as SelectList, new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-4 docente">
                <div class="form-group">
                    <label for="horasDocenteID" class="control-label"></label>
                    @Html.DropDownListFor(model => model.horasDocenteID, new SelectList(new List<SelectListItem>()), new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.fechaIngreso, new { @class = "control-label" })
                    <div class="input-group date">
                        @Html.TextBoxFor(model => model.fechaIngreso, "{0:dd/MM/yyyy}", new { @class = "form-control", @readonly = "readonly" })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-calendar-o"></i></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.estadoID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.estadoID, ViewBag.ListaEstados as SelectList, null, new { @class = "form-control text-uppercase" })
                    @Html.ValidationMessageFor(model => model.estadoID, null, new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-5">
                <div class="form-group">
                    @Html.LabelFor(model => model.bancoID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.bancoID, ViewBag.ListaBancos as SelectList, "[ SELECCIONAR ]", new { @class = "form-control text-uppercase select-filter-modal" })
                    @Html.ValidationMessageFor(model => model.bancoID, null, new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-3">
                <div class="form-group">
                    <label class="control-label" for="nroCuentaBancaria">&nbsp;</label>
                    @Html.TextBoxFor(model => model.nroCuentaBancaria, new { @class = "form-control", @placeholder = "Num.Cuenta" })
                    @Html.ValidationMessageFor(model => model.nroCuentaBancaria, null, new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.tipoCuentaBancariaID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.tipoCuentaBancariaID, ViewBag.ListaTipoCuentasBancarias as SelectList, "[ SELECCIONAR ]", new { @class = "form-control text-uppercase" })
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-12">
                <div class="mb-3 row">
                    @Html.LabelFor(model => model.dependenciaID, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-10">
                        @Html.DropDownListFor(model => model.dependenciaID, ViewBag.ListaDependencias as SelectList, "[ SELECCIONAR ]", new { @class = "form-control text-uppercase select-filter-modal" })
                        @Html.ValidationMessageFor(model => model.dependenciaID, null, new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.regimenID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.regimenID, ViewBag.ListaRegimenes as SelectList, null, new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.afpID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.afpID, ViewBag.ListaAfps as SelectList, "[ SELECCIONAR ]", new { @class = "form-control text-uppercase" })
                    @Html.ValidationMessageFor(model => model.afpID, null, new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row d-flex justify-content-center">
            <button type="submit" class="btn btn-primary center" id="btnsubmit"><i class="fa fa-save"></i> Guardar</button>
        </div>
    }
</div>

<div class="modal-footer" id="div_msg">
    <div class="col-md-12" style="display:none" id="loading">
        <h6>Espere un momento...</h6>
        <div class="progress">
            <div class="indeterminate"></div>
        </div>
    </div>

    <button type="button" class="btn btn-secondary" id="btnCancel" data-dismiss="modal">
        <i class="fa fa-times-circle-o"></i> Cerrar
    </button>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $('.select-filter-modal').select2({
            theme: 'bootstrap4',
            dropdownParent: $('#modal-container-lg')
        }).on('hide', function (e) {
            e.stopPropagation();
        });

        $('.input-group.date').datepicker({
            todayBtn: 'linked',
            language: 'es',
            format: 'dd/mm/yyyy',
            autoclose: true,
            weekStart: 0,
            orientation: 'auto',
            endDate: new Date()
        }).on('hide', function (e) {
            e.stopPropagation();
        });

        mostrarFiltroSegunVinculo(parseInt($('.modal-body #vinculoID').val()));

        habilitarAfp(parseInt($('.modal-body #regimenID').val()));

        $(".modal-body").on("change", "#vinculoID", function () {
            let vinculoID = parseInt(this.value);

            mostrarFiltroSegunVinculo(vinculoID);
        });

        $(".modal-body").on("change", "#regimenID", function () {
            let regimenID = parseInt(this.value);

            habilitarAfp(regimenID);
        });

        $('#numDocumento').autocomplete({
            source: function (request, response) {
                var inputText = request.term.trim();

                if (inputText.length >= 6) {
                    $.ajax({
                        url: '@Url.Action("ObtenerPersonasPorDocIdentidad", "General")/',
                        data: {
                            numDocumento: request.term,
                            tipoDocumentoID: $('#tipoDocumentoID').val()
                        },
                        dataType: 'json',
                        success: function (data) {
                            if (data.Success) {
                                var formattedData = data.Result.map(function (persona) {
                                    return {
                                        label: `${persona.apellidoPaterno} ${persona.apellidoMaterno}, ${persona.nombre} - ${persona.numDocumento}`,
                                        value: persona.numDocumento,
                                        persona: persona
                                    };
                                });
                                response(formattedData.slice(0, 15));
                            }
                        }
                    });
                }
            },
            select: function (event, ui) {
                var persona = ui.item.persona;
                $('.modal-body #numDocumento').val(persona.numDocumento);
                $('.modal-body #apellidoPaterno').val(persona.apellidoPaterno);
                $('.modal-body #apellidoMaterno').val(persona.apellidoMaterno);
                $('.modal-body #nombre').val(persona.nombre);
                return false;
            }
        });

        $.validator.addMethod("ValidarLongitudNumeroDocumento", function (value) {
            var tipoDocumento = $("#tipoDocumentoID").val();

            var longitud = value.length;

            var longitudMinima = 0;
            var longitudMaxima = 0;

            if (tipoDocumento == TIPO_DOCUMENTO_IDENTIDAD.DNI) {
                longitudMinima = 8;
                longitudMaxima = 8;
            } else {
                longitudMinima = 1;
                longitudMaxima = 20;
            }

            if (longitud < longitudMinima || longitud > longitudMaxima) {
                return false;
            } else {
                return true;
            }
        }, "La cantidad de caracteres del número de documento es incorrecta.");

        $.validator.addMethod("ValidarCaracteresNumeroDocumento", function (value) {
            var tipoDocumento = $("#tipoDocumentoID").val();

            var regex = /^\d{8}$/;

            if (tipoDocumento == TIPO_DOCUMENTO_IDENTIDAD.DNI && !regex.test(value)) {
                return false;
            }

            return true;
        }, "El DNI sólo debe contener números.");

        $.validator.addMethod("ValidarNombresYApellidos",
            function (value) {
                if (value !== null && value.trim().length > 0) {
                    var regex = /^[^\d]+$/;

                    if (!regex.test(value)) {
                        return false;
                    }
                }

                return true;
            },
            function (value, element) {
                var nombreCampo = $(element).closest('.form-group').find('label').text();

                return `El campo ${nombreCampo} no puede contener números.`;
            }
        );

        $.validator.addMethod("ValidarAfpObligatorio", function (value) {
            var regimenID = $("#regimenID").val();

            if ((regimenID != null && regimenID != "") && regimenID == REGIMEN.SPP && (value == null || value == "")) {
                return false;
            }

            return true;
        }, "El campo AFP es obligatorio.");

        $("#numDocumento").rules("add", {
            ValidarLongitudNumeroDocumento: true,
            ValidarCaracteresNumeroDocumento: true
        });

        $("#nombre").rules("add", {
            ValidarNombresYApellidos: true
        });

        $("#apellidoPaterno").rules("add", {
            ValidarNombresYApellidos: true
        });

        $("#apellidoMaterno").rules("add", {
            ValidarNombresYApellidos: true
        });

        $("#afpID").rules("add", {
            ValidarAfpObligatorio: true
        });
    });

    function mostrarFiltroSegunVinculo(vinculoID) {
        let listaCategeoriaDocenteOrdinario = @Html.Raw(Json.Encode(ViewBag.CategoriasDocenteOrdinario as SelectList));
        let listaCategeoriaDocenteContratado = @Html.Raw(Json.Encode(ViewBag.CategoriasDocenteContratado as SelectList));
        let listaHorasDocenteOrdinario = @Html.Raw(Json.Encode(ViewBag.HorasDocenteOrdinario as SelectList));
        let listaHorasDocenteContratado = @Html.Raw(Json.Encode(ViewBag.HorasDocenteContratado as SelectList));

        $('.modal-body .administrativo').css("display", "none");
        $('.modal-body .docente').css("display", "none");
        
        switch (vinculoID) {
            case VINCULO.ADMINISTRATIVO_PERMANENTE:
                $('.modal-body .administrativo').css("display", "block");
                break;

            case VINCULO.ADMINISTRATIVO_CONTRATADO:
                $('.modal-body .administrativo').css("display", "block");
                break;

            case VINCULO.DOCENTE_PERMANENTE:
                cargarComboDocente(true, listaCategeoriaDocenteOrdinario, listaHorasDocenteOrdinario);
                $('.modal-body .docente').css("display", "block");
                break;

            case VINCULO.DOCENTE_CONTRATADO:
                cargarComboDocente(false, listaCategeoriaDocenteContratado, listaHorasDocenteContratado);
                $('.modal-body .docente').css("display", "block");
                break;
        }
    }

    function habilitarAfp(regimenID) {
        if (regimenID === REGIMEN.SPP) {
            $('.modal-body #afpID').prop("disabled", "");
        } else {
            $('.modal-body #afpID').prop("disabled", "disabled");
            $('.modal-body #afpID').val(null);
        }
    }

    function cargarComboDocente(esParaDocenteOrdinario, listaCategoria, listaHoras) {
        let labelCategoria = 'Cat.Docente';
        let labelHoras = 'Ded.Docente / Horas';

        let comboCategoria = $('.modal-body #categoriaDocenteID');
        let comboHora = $('.modal-body #horasDocenteID');

        comboCategoria.empty();
        comboHora.empty();

        $.each(listaCategoria, function (index, item) {
            comboCategoria.append('<option value="' + item.Value + '">' + item.Text + '</option>');
        });

        if (esParaDocenteOrdinario) {
            let currentGroup = null;

            $.each(listaHoras, function (index, item) {
                if (item.Group.Name !== currentGroup) {
                    comboHora.append('<optgroup label="' + item.Group.Name + '"></optgroup>');
                    currentGroup = item.Group.Name;
                }

                comboHora.find('optgroup[label="' + item.Group.Name + '"]')
                    .append('<option value="' + item.Value + '">' + item.Text + '</option>');
            });
        }
        else {
            $.each(listaHoras, function (index, item) {
                comboHora.append('<option value="' + item.Value + '">' + item.Text + '</option>');
            });

            labelCategoria = 'Tipo Docente';
            labelHoras = 'Clasif.Docente / Horas';
        }

        $('.modal-body label[for=categoriaDocenteID]').html(labelCategoria);
        $('.modal-body label[for=horasDocenteID]').html(labelHoras);
    }
</script>