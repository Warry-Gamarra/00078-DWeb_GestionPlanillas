@model WebApp.Models.TrabajadorModel
@Scripts.Render("~/bundles/jqueryval")

<div class="modal-header bg-dark-gray" style="border-radius: .2rem .2rem 0px 0px">
    <h5 class="modal-title text-center"><i class="fa fa-tag">&nbsp;</i> @ViewBag.Title</h5>
    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
</div>

<div class="modal-body">
    @using (Ajax.BeginForm((string)ViewBag.Action, "Trabajadores", new { area = "" }, new AjaxOptions
    {
        HttpMethod = "POST",
        InsertionMode = InsertionMode.Replace,
        UpdateTargetId = "div_msg",
        OnBegin = "Load",
        OnComplete = "Stop"
    }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.I_TrabajadorID)
        <div class="form-row">
            <div class="col-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.I_TipoDocumentoID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.I_TipoDocumentoID, ViewBag.ListaTipoDocumentos as SelectList, null, new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-3">
                <div class="form-group">
                    <label class="control-label" for="">&nbsp;</label>
                    @Html.TextBoxFor(model => model.C_NumDocumento, new { @class = "form-control", @placeholder = "Num.Documento" })
                </div>
            </div>
            <div class="col-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.T_ApellidoPaterno, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.T_ApellidoPaterno, new { @class = "form-control" })
                </div>
            </div>
            <div class="col-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.T_ApellidoMaterno, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.T_ApellidoMaterno, new { @class = "form-control" })
                </div>
            </div>
            <div class="col-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.T_Nombre, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.T_Nombre, new { @class = "form-control" })
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.C_TrabajadorCod, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.C_TrabajadorCod, new { @class = "form-control" })
                </div>
            </div>
            <div class="col-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.I_VinculoID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.I_VinculoID, ViewBag.ListaVinculos as SelectList, null, new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-2 administrativo">
                <div class="form-group">
                    @Html.LabelFor(model => model.I_GrupoOcupacionalID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.I_GrupoOcupacionalID, ViewBag.GruposOcupacionales as SelectList, new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-2 administrativo">
                <div class="form-group">
                    @Html.LabelFor(model => model.I_NivelRemunerativoID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.I_NivelRemunerativoID, ViewBag.NivelesRemunerativos as SelectList, new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-2 docente">
                <div class="form-group">
                    @Html.LabelFor(model => model.I_CategoriaDocenteID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.I_CategoriaDocenteID, ViewBag.CategoriasDocente as SelectList, new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-2 docente">
                <div class="form-group">
                    @Html.LabelFor(model => model.I_HorasDocenteID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.I_HorasDocenteID, ViewBag.HorasDocente as SelectList, new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.I_EstadoID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.I_EstadoID, ViewBag.ListaEstados as SelectList, null, new { @class = "form-control text-uppercase" })
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.D_FechaIngreso, new { @class = "control-label" })
                    <div class="input-group date">
                        @Html.TextBoxFor(model => model.D_FechaIngreso, "{0:dd/MM/yyyy}", new { @class = "form-control", @readonly = "readonly" })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-calendar-o"></i></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.I_BancoID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.I_BancoID, ViewBag.ListaBancos as SelectList, "[ SELECCIONAR ]", new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-3">
                <div class="form-group">
                    <label class="control-label" for="">&nbsp;</label>
                    @Html.TextBoxFor(model => model.T_NroCuentaBancaria, new { @class = "form-control", @placeholder = "Num.Cuenta" })
                </div>
            </div>
            <div class="col-3">
                <div class="form-group">
                    <label class="control-label" for="">Carnet Essalud</label>
                    <input type="text" class="form-control" value="7606021NRPAW000" readonly />
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-12">
                <div class="mb-3 row">
                    @Html.LabelFor(model => model.I_DependenciaID, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-10">
                        @Html.DropDownListFor(model => model.I_DependenciaID, ViewBag.ListaDependencias as SelectList, "[ SELECCIONAR ]", new { @class = "form-control text-uppercase select-filter-modal" })
                    </div>
                </div>
            </div>
        </div>

        <div class="form-row">
            <div class="col-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.I_RegimenID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.I_RegimenID, ViewBag.ListaRegimenes as SelectList, null, new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.I_AfpID, new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.I_AfpID, ViewBag.ListaAfps as SelectList, "[ SELECCIONAR ]", new { @class = "form-control text-uppercase" })
                </div>
            </div>
            <div class="col-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.T_Cuspp, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.T_Cuspp, new { @class = "form-control" })
                </div>
            </div>
            <div class="col-3">
                <div class="form-group">
                    <label class="control-label" for="">CARGO</label>
                    <input type="text" class="form-control" value="" readonly />
                </div>
            </div>
        </div>

        <div class="row d-flex justify-content-center">
            <button type="submit" class="btn btn-primary center" id="btnsubmit"><i class="fa fa-save"></i> Guardar</button>
        </div>
    }
</div>

<div class="modal-footer" id="div_msg">
    <div class="col-md-12" style="display:none" id="loading">
        <h6>Espere un momento...</h6>
        <div class="progress">
            <div class="indeterminate"></div>
        </div>
    </div>

    <button type="button" class="btn btn-secondary" id="btnCancel" data-dismiss="modal">
        <i class="fa fa-times-circle-o"></i> Cerrar
    </button>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $('.select-filter-modal').select2({
            theme: 'bootstrap4',
            dropdownParent: $('#modal-container-lg'),
            placeholder: "[ SELECCIONAR ]"
        }).on('hide', function (e) {
            e.stopPropagation();
        });

        $('.input-group.date').datepicker({
            todayBtn: 'linked',
            language: 'es',
            format: 'dd/mm/yyyy',
            autoclose: true,
            weekStart: 0,
            orientation: 'auto'
        }).on('hide', function (e) {
            e.stopPropagation();
        });

        mostrarFiltroSegunVinculo(parseInt($('.modal-body #I_VinculoID').val()));

        habilitarAfp(parseInt($('.modal-body #I_RegimenID').val()));

        $(".modal-body").on("change", "#I_VinculoID", function () {
            let vinculoID = parseInt(this.value);

            mostrarFiltroSegunVinculo(vinculoID);
        });

        $(".modal-body").on("change", "#I_RegimenID", function () {
            let regimenID = parseInt(this.value);

            habilitarAfp(regimenID);
        });
    });

    function mostrarFiltroSegunVinculo(vinculoID) {
        $('.modal-body .administrativo').css("display", "none");
        $('.modal-body .docente').css("display", "none");

        switch (vinculoID) {
            case VINCULO.ADMINISTRATIVO_PERMANENTE:
                $('.modal-body .administrativo').css("display", "block");
                break;

            case VINCULO.ADMINISTRATIVO_CONTRATADO:
                $('.modal-body .administrativo').css("display", "block");
                break;

            case VINCULO.DOCENTE_PERMANENTE:
                $('.modal-body .docente').css("display", "block");
                break;
        }
    }

    function habilitarAfp(regimenID) {
        if (regimenID === REGIMEN.AFP) {
            $('.modal-body #I_AfpID').prop("disabled", "");
            $('.modal-body #T_Cuspp').prop("disabled", "");
        } else {
            $('.modal-body #I_AfpID').prop("disabled", "disabled");
            $('.modal-body #T_Cuspp').prop("disabled", "disabled");
        }
    }
</script>